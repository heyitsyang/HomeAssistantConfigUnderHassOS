##  Note: leading spaces in each line are critical
##  to yaml interpretation - do not delete them

#################################
# SCRIPTS
#################################

#
# STARTUP ACTIONS
#
scr_ha_startup:
  sequence:
    - delay: "00:00:15" # short delay to be sure entities are initialized before use
    #- service: script.scr_sonos_eval_announce # evaluate how to start speakers - joined or unjoined based on guest mode
    - service: input_boolean.turn_off # initialize announcements as off
      target:
        entity_id: input_boolean.inp_bool_announcements
    - service: input_boolean.turn_off # initialize sleeping as ON
      target:
        entity_id: input_boolean.inp_bool_sleeping
    - condition: template
      value_template: >
        {{ ( as_timestamp(now(), '')| timestamp_custom('%H:%M:%S', true, '') > (states('input_datetime.assume_awake') ) )  and 
          ( as_timestamp(now(), '')| timestamp_custom('%H:%M:%S', true, '') < (states('input_datetime.assume_asleep') ) ) }}
    - service: input_boolean.turn_on
      target:
        entity_id: input_boolean.inp_bool_announcements
    - service: input_boolean.turn_off
      target:
        entity_id: input_boolean.inp_bool_sleeping

#
# GOODNIGHT SCRIPT
#   All lights except guest suite are turned off in an Alexa routine before
#   running this script, so only guest suite lights a handled here
#
scr_goodnight: # called by Alexa as PART of Goodnight Routine
  sequence:
    - service: input_boolean.turn_on
      target:
        entity_id: input_boolean.inp_bool_sleeping
    - service: input_boolean.turn_off
      target:
        entity_id: input_boolean.party_mode
    - service: lock.lock
      target:
        entity_id: lock.front_door_lock, lock.back_door_lock
    - if:
        - or:
            - condition: state
              entity_id: cover.large_garage_door
              state: "open"
            - condition: state
              entity_id: cover.small_garage_door
              state: "open"
      then:
        - service: script.scr_say_phrase
          data:
            message: "A garage door is still open"
        - service: notify.alexa_yellow_ring
          data:
            message: "A garage door is still open"
    - if:
        - condition: state
          entity_id: input_boolean.inp_bool_guest_mode # goodnight routine ignores guest area lights if overnight guest mode is ON
          state: "off"
      then:
        - service: light.turn_off
          target:
            entity_id:
              - light.office_lights
              - light.office_cabinet_leds_master
              - light.office_monitor_leds
              - light.guest_room_lights

#
# NOBODY HOME
#
scr_nobody_home:
  sequence:
    - service: script.scr_say_phrase
      data:
        message: "I feel so empty inside when my people are away."
    - condition: state
      entity_id: input_boolean.inp_bool_guest_mode # do not execute remainder unless Overnight Guest is OFF
      state: "off"
    - service: lock.lock
      target:
        entity_id: lock.front_door_lock, lock.back_door_lock
    - service: homeassistant.turn_off
      target:
        entity_id: group.all_lighting_xabove_cabinet

#
# PLUMBING & WATER RELATED
#
scr_spt_start:
  sequence:
    - service: mqtt.publish
      data:
        topic: watermain/cmd/sptDuration
        payload_template: "{{ states('input_number.inp_num_spt_duration') }}"
    - service: mqtt.publish
      data:
        topic: watermain/cmd/sptStart

#
# PERFORM INDIV. HOME ARRIVAL ACTIONS
#
scr_arrival_announcement:
  mode: queued
  sequence:
    - service: script.scr_say_phrase
      data:
        message: "Hi {{ person }}, welcome home."
    - condition: state
      entity_id: input_boolean.inp_bool_visitor_while_out_flag # do not execute remaining unless flag is ON
      state: "on"
    - service: script.scr_say_phrase
      data:
        message: "While you where away, there was a visitor at the front door"
    - service: input_boolean.turn_off
      data:
        entity_id: input_boolean.inp_bool_visitor_while_out_flag

# SIMULATE AN OCCUPIED HOME
#
scr_occupied_sim:
  sequence:
    - delay: "00:{{ (range(1, 20)|random|int(default=0)) }}:00"
    - service: light.turn_on
      data:
        entity_id: light.living_room_lights
        brightness_pct: 30
    - delay: "02:{{ (range(1, 59)|random|int(default=0)) }}:00"
    - service: light.turn_on
      data:
        entity_id: light.master_bedroom_lights
        brightness_pct: 50
    - delay: "00:{{ (range(1, 59)|random|int(default=0)) }}:00"
    - service: homeassistant.turn_off
      target:
        entity_id: group.indoor_lights

#
# COMMON EXTENDED ABSENCE ACTIONS
#
scr_common_extended_absence_on:
  mode: restart # start new script run after stopping previous to prevent confusion due to delay
  sequence:
    - service: script.scr_check_sunrm_windows
    - service: script.scr_close_sunrm_shades
    - service: lock.lock
      target:
        entity_id: lock.front_door_lock,lock.back_door_lock
    - service: homeassistant.turn_off
      target:
        entity_id: group.all_lighting_xabove_cabinet
    - if:
        - condition: state
          entity_id: input_boolean.leave_water_valve_on
          state: "off"
      then:
        - service: switch.turn_off
          target:
            entity_id: switch.water_valve
    - delay: "00:20:00"
    - service: switch.turn_off
      target:
        entity_id: switch.lg_garage_opener_power,switch.sm_garage_opener_power

scr_common_extended_absence_off:
  mode: restart # start new script run after stopping previous to prevent confusion due to delay
  sequence:
    - service: switch.turn_on
      target:
        entity_id: switch.water_valve
    - service: switch.turn_on
      target:
        entity_id: switch.lg_garage_opener_power,switch.sm_garage_opener_power

#
# COMMON EXTENDED ABSENCE ACTIONS
#
scr_common_guest_mode_on:
  mode: restart
  sequence:
    #- service: script.scr_sonos_unjoin4announce
    - service: input_boolean.turn_on # leave water valve ON if absent & with guest
      target:
        entity_id: input_boolean.leave_water_valve_on
    - service: input_boolean.turn_off
      target:
        entity_id: input_boolean.inp_bool_vacuum_every_sunday
    - service: input_boolean.turn_on
      target:
        entity_id: input_boolean.inhibit_office_mood_lighting

scr_common_guest_mode_off:
  mode: restart
  sequence:
    #- service: script.scr_sonos_join4announce
    - service: input_boolean.turn_off
      target:
        entity_id: input_boolean.inp_bool_guest_in_sunroom
    - service: input_boolean.turn_off # leave water valve ON if absent & with guest
      target:
        entity_id: input_boolean.leave_water_valve_on
    - service: input_boolean.turn_on
      target:
        entity_id: input_boolean.inp_bool_vacuum_every_sunday
    - service: input_boolean.turn_off
      target:
        entity_id: input_boolean.inhibit_office_mood_lighting

#
# CHECK IF SUN ROOM WINDOWS ARE OPEN & REPORT
#
scr_check_sunrm_windows:
  sequence:
    - condition: or
      conditions:
        - condition: state
          entity_id: binary_sensor.sun_room_window_1_window_door_is_open
          state: "on"
        - condition: state
          entity_id: binary_sensor.sun_room_window_2_window_door_is_open
          state: "on"
        - condition: state
          entity_id: binary_sensor.sun_room_window_3_window_door_is_open
          state: "on"
        - condition: state
          entity_id: binary_sensor.sun_room_window_4_window_door_is_open
          state: "on"
        - condition: state
          entity_id: binary_sensor.sun_room_window_5_window_door_is_open
          state: "on"
        - condition: state
          entity_id: binary_sensor.sun_room_window_6_window_door_is_open
          state: "on"
    - service: script.scr_say_phrase
      data:
        message: "You have a window open in the sun room.  The shades will not be automatically closed."
    - service: notify.alexa_yellow_ring
      data:
        message: "You have a window open in the sun room.  The shades will not be automatically closed."

#
# CLOSE SUN ROOM SHADES
#
scr_close_sunrm_shades:
  sequence:
    - condition: and
      conditions:
        - condition: state
          entity_id: input_boolean.inp_bool_inhibit_shades
          state: "off"
        - condition: state
          entity_id: binary_sensor.sun_room_window_1_window_door_is_open
          state: "off"
        - condition: state
          entity_id: binary_sensor.sun_room_window_2_window_door_is_open
          state: "off"
        - condition: state
          entity_id: binary_sensor.sun_room_window_3_window_door_is_open
          state: "off"
        - condition: state
          entity_id: binary_sensor.sun_room_window_4_window_door_is_open
          state: "off"
        - condition: state
          entity_id: binary_sensor.sun_room_window_5_window_door_is_open
          state: "off"
        - condition: state
          entity_id: binary_sensor.sun_room_window_6_window_door_is_open
          state: "off"
    - service: cover.close_cover
      target:
        entity_id: cover.sun_room_shades

#
# PARTIALLY CLOSE SUN ROOM SHADES
#
scr_partial_close_sunrm_shades:
  sequence:
    - condition: and
      conditions:
        - condition: state
          entity_id: input_boolean.inp_bool_inhibit_shades
          state: "off"
        - condition: state
          entity_id: binary_sensor.sun_room_window_1_window_door_is_open
          state: "off"
        - condition: state
          entity_id: binary_sensor.sun_room_window_2_window_door_is_open
          state: "off"
        - condition: state
          entity_id: binary_sensor.sun_room_window_3_window_door_is_open
          state: "off"
        - condition: state
          entity_id: binary_sensor.sun_room_window_4_window_door_is_open
          state: "off"
        - condition: state
          entity_id: binary_sensor.sun_room_window_5_window_door_is_open
          state: "off"
        - condition: state
          entity_id: binary_sensor.sun_room_window_6_window_door_is_open
          state: "off"
    - service: cover.set_cover_position
      data:
        entity_id: cover.sun_room_shades
        position: "{{ position }}"

scr_partially_close_sunrm_shades:
  sequence:
    - service: script.scr_check_sunrm_windows # be sure no windows are open
    - service: script.scr_partial_close_sunrm_shades
      data:
        position: "40" # drop shades to X% open

#
# DOOR LOCK / KEYMASTER
#
keymaster_front_door_manual_notify:
  mode: parallel
  sequence:
    - service: notify.yskt_cell_phones
      data:
        title: "{{ title }}"
        message: "{{ message }}"

keymaster_back_door_manual_notify:
  mode: parallel
  sequence:
    - service: notify.yskt_cell_phones
      data:
        title: "{{ title }}"
        message: "{{ message }}"

#
# SUSPICIOUS ACTIVITY IF NOBODY HOME
#
scr_check_if_suspicious:
  sequence:
    - condition: and
      conditions:
        - condition: state
          entity_id: input_boolean.inp_bool_guest_mode # do not execute remainder unless Overnight Guest is OFF
          state: "off"
        - condition: state
          entity_id: input_boolean.inp_bool_extended_absence_mode # do not execute remainder unless Extended Absence is ON
          state: "on"
        - condition: not # testing for not_home else doesn't work if in a known zone
          conditions:
            - condition: state
              entity_id: person.yang
              state: "home"
            - condition: state
              entity_id: person.karen
              state: "home"
    - service: notify.yskt_cell_phones
      data:
        title: "SUSPICIOUS ACTIVITY at Norcoose"
        message: "PRESS to investigate"
        data:
          clickAction: "ccab4aaf_frigate/dashboard"
          channel: "Urgent"
          importance: "high"
          media_stream: alarm_stream
          vibrationPattern: "100, 1000, 100, 1000, 100, 1000"
          persistent: "true"
          tag: "persistent"
          priority: high
          ttl: 0
    - service: notify.gmail_to_yang
      data:
        message: "SUSPICIOUS ACTIVITY detected in Norcoose home"
    - service: notify.yskt_cell_phones
      data:
        message: "TTS"
        data:
          tts_text: "SUSPICIOUS ACTIVITY at Norcoose"
          media_stream: alarm_stream_max

#
# NOTIFY IF GARAGE DOOR IS OPEN
#
scr_check_garage_open:
  sequence:
    - condition: or
      conditions:
        - condition: state
          entity_id: cover.large_garage_door
          state: "open"
        - condition: state
          entity_id: cover.small_garage_door
          state: "open"
    - service: notify.yskt_cell_phones
      data:
        message: "TTS"
        data:
          tts_text: "A garage door has been left open"
          media_stream: alarm_stream
          priority: high
          ttl: 0
    - service: notify.yskt_cell_phones
      data:
        title: "GARAGE DOOR LEFT OPEN"
        message: "Did you forget to close it?  PRESS to see."
        data:
          clickAction: "lovelace/security"
          priority: high
          ttl: 0

scr_repeat_say_garage_open:
  sequence:
    - service: script.scr_say_phrase
      data:
        message: "A garage door has been left open"
    - delay: "00:10:00"
    - condition: or
      conditions:
        - condition: state
          entity_id: cover.large_garage_door
          state: "open"
        - condition: state
          entity_id: cover.small_garage_door
          state: "open"
    - service: script.scr_say_phrase
      data:
        message: "A garage door is still open"
    - delay: "00:10:00"
    - condition: or
      conditions:
        - condition: state
          entity_id: cover.large_garage_door
          state: "open"
        - condition: state
          entity_id: cover.small_garage_door
          state: "open"
    - service: script.scr_say_phrase
      data:
        message: "A garage door is still open"
    - delay: "00:10:00"
    - condition: or
      conditions:
        - condition: state
          entity_id: cover.large_garage_door
          state: "open"
        - condition: state
          entity_id: cover.small_garage_door
          state: "open"
    - service: script.scr_say_phrase
      data:
        message: "A garage door is still open"
    - delay: "00:10:00"
    - condition: or
      conditions:
        - condition: state
          entity_id: cover.large_garage_door
          state: "open"
        - condition: state
          entity_id: cover.small_garage_door
          state: "open"
    - service: script.scr_say_phrase
      data:
        message: "A garage door is still open.  This is your last reminder."
    - service: notify.alexa_yellow_ring
      data:
        message: "A garage door is still open"

#
# MOOD LIGHTING
#
scr_mood_lighting_on:
  sequence:
    - condition: state
      entity_id: group.mood_lights
      state: "off"
    - service: scene.turn_on
      target:
        entity_id: scene.sun_room_uplights_20
    - service: homeassistant.turn_on
      target:
        entity_id: group.mood_lights
    - choose:
        - conditions:
            - condition: time
              weekday:
                - mon # night before trash day
                - thu # night before trash day
          sequence:
            - service: scene.turn_on
              target:
                entity_id: scene.kitchen_mood_trash_night
      default:
        - service: scene.turn_on
          target:
            entity_id: scene.kitchen_mood_spots_50_warm_white

scr_reset_mood_lights_to_default:
  sequence:
    - service: scene.turn_on
      target:
        entity_id: scene.kitchen_mood_spots_50_warm_white

#
# MOTION LIGHTING - if luminosity is low and motion is detected
#
scr_motion_lighting_on:
  sequence:
    - condition: and
      conditions:
        - condition: state
          entity_id: input_boolean.inp_bool_sleeping # execute only if not sleeping
          state: "off"
        - condition: template # ignore if suggested is zero to avoid conflicting sensors
          value_template: "{{ states('sensor.lv_rm_suggested_brightness') | int(default=0) != 0 }}"
        - condition: state
          entity_id: binary_sensor.lum_lvrm_lights_indoor_trig # luminosity level is set in input_numbers.yaml
          state: "on"
        - condition: state
          entity_id: input_boolean.inp_bool_theater_mode # avoid changing brightness if theater mode
          state: "off"
    - service: light.turn_on
      data:
        entity_id: light.living_room_lights
        brightness_pct: "{{ states('sensor.lv_rm_suggested_brightness') | int(default=0)}}"

#
# PATHWAY MOTION LIGHTING
scr_pathway_motion_lighting_on:
  sequence:
    - condition: state
      entity_id: binary_sensor.lum_mood_lights_f_solar_trig
      state: "on"
    - service: scene.turn_on
      target:
        entity_id: scene.kitchen_mood_spots_20_warm_white
    - service: homeassistant.turn_on
      target:
        entity_id: group.pathway_lights

scr_pathway_motion_lighting_off:
  sequence:
    - condition: time # confine auto-off period due to *MOTION*
      after: "00:09" # to after midnight
    - condition: sun # and before sunrise
      before: sunrise
    - condition: state
      entity_id: group.pathway_lights
      state: "on"
    - service: homeassistant.turn_off
      target:
        entity_id: group.pathway_lights

#
# GREAT ROOM LIGHTING
#
scr_great_room_motion_lighting_off:
  sequence:
    - condition: state
      entity_id: group.great_room_lights
      state: "on"
    - service: homeassistant.turn_off
      target:
        entity_id: group.great_room_lights

#
# OUTDOOR LIGHTS AND NOTIFICATIONS
#
scr_frontporch_activity:
  sequence:
    - service: script.turn_on # use this method to de-serialize the speech so cameras are not delayed
      entity_id: script.scr_say_phrase
      data:
        variables:
          message: "You have a visitor at the front door"
    - service: camera.snapshot
      data:
        entity_id: camera.frontporch
        filename: /config/www/camera_stills/frontporch.jpg
    - condition: not # testing for not_home else doesn't work if in a known zone
      conditions:
        - condition: state
          entity_id: person.yang
          state: "home"
        - condition: state
          entity_id: person.karen
          state: "home"
    - service: input_boolean.turn_on
      target:
        entity_id: input_boolean.inp_bool_visitor_while_out_flag
    - service: notify.alexa_yellow_ring
      data:
        message: "While you where away, there was a visitor at the front door"
    - service: notify.yskt_cell_phones
      data:
        title: Front door activity
        message: "Front door activity detected"
        data:
          clickAction: "lovelace/last-snaps"
    - service: notify.yskt_cell_phones
      data:
        title: Front door activity
        message: TTS
        data:
          tts_text: "Front door activity detected"

scr_front_door_lights_on:
  sequence:
    - condition: state
      entity_id: binary_sensor.lum_outdoor_lights_solar_trig
      state: "on"
    - condition: template # sensor is broken if zero
      value_template: "{{ states('sensor.raw_solar_tube_luminosity') | int(default=0) > 0 }}"
    - service: light.turn_on
      target:
        entity_id: light.front_door_lights # light is auto switched off after door locked and/or delay

scr_back_door_lights_on:
  sequence:
    - condition: state
      entity_id: binary_sensor.lum_outdoor_lights_solar_trig
      state: "on"
    - condition: template # sensor is broken if zero
      value_template: "{{ states('sensor.raw_solar_tube_luminosity') | int(default=0) > 0 }}"
    - service: light.turn_on
      target:
        entity_id: light.back_door_lights # light is auto switched off door locked and/or delay

#
# SPEAK PHRASE
#
# - if ANNOUNCEMENTS are off, then don't speak
# - if GUEST MODE then only to kitchen, otherwise to all
#
scr_say_phrase:
  mode: queued
  sequence:
    - service: sonos.snapshot
      data:
        entity_id:
          - media_player.office_speakers
          - media_player.main_speakers
        with_group: true
    - choose:
        - conditions: # high priority - ignores announce & sleeping conditions
            - condition: template
              value_template: "{{ priority == 'high' }}"
          sequence:
            - service: media_player.volume_set
              data:
                entity_id: media_player.office_speakers
                volume_level: 0.40 # set high priority speaking volume
            - service: media_player.volume_set
              data:
                entity_id: media_player.main_speakers
                volume_level: 0.50 # set high priority speaking volume
            - service: media_player.volume_set
              data:
                entity_id: media_player.garage_speakers
                volume_level: 0.99 # set high priority speaking volume
            - choose:
                - conditions:
                    - condition: state
                      entity_id: input_boolean.inp_bool_guest_mode
                      state: "on"
                  sequence:
                    - service: media_player.play_media
                      data:
                        announce: false
                        entity_id:
                          - media_player.main_speakers
                          - media_player.garage_speakers
                        media_content_id: media-source://tts/google_translate?message="This is a high priority message. {{ message }}"
                        media_content_type: music
              default:
                - service: media_player.play_media
                  data:
                    announce: false
                    entity_id:
                      - media_player.main_speakers
                      - media_player.garage_speakers
                      - media_player.office_speakers
                    media_content_id: media-source://tts/google_translate?message="This is a high priority message. {{ message }}"
                    media_content_type: music
      default: # normal priority - respects announce & sleeping conditions
        - condition: state
          entity_id: input_boolean.inp_bool_announcements # do not execute remaining unless announce is ON
          state: "on"
        - condition: state
          entity_id: input_boolean.inp_bool_sleeping # do not execute remaining unless sleeping is OFF
          state: "off"
        - service: media_player.volume_set
          data:
            entity_id: media_player.office_speakers
            volume_level: 0.18 # set normal speaking volume
        - service: media_player.volume_set
          data:
            entity_id: media_player.main_speakers
            volume_level: 0.28 # set normal speaking volume
        - service: media_player.volume_set
          data:
            entity_id: media_player.garage_speakers
            volume_level: 0.99 # set high priority speaking volume
        - choose:
            - conditions:
                - condition: state
                  entity_id: input_boolean.inp_bool_guest_mode
                  state: "on"
              sequence:
                - service: media_player.play_media
                  data:
                    announce: false
                    entity_id:
                      - media_player.main_speakers
                      - media_player.garage_speakers
                    media_content_id: media-source://tts/google_translate?message="{{ message }}"
                    media_content_type: music
          default:
            - service: media_player.play_media
              data:
                announce: false
                entity_id:
                  - media_player.main_speakers
                  - media_player.garage_speakers
                  - media_player.office_speakers
                media_content_id: media-source://tts/google_translate?message="{{ message }}"
                media_content_type: music
    - wait_template: "{{ is_state('media_player.main_speakers', 'playing') }}" # check for start to be sure next wait isn't too soon
      timeout: "00:00:15"
    - wait_template: "{{ not is_state('media_player.main_speakers', 'playing') }}" # wait for finish
      timeout: "00:02:00"
    - service: sonos.restore # premature restore will cut off speech potentially
      data: # before it has started or during play
        entity_id:
          - media_player.main_speakers
          - media_player.office_speakers
        with_group: true

#
#  SONOS JOIN/UNJOIN SCRIPTS
#
# scr_sonos_join4announce:
#   sequence:
#     - condition: template
#       value_template: "{{ 'media_player.office_speakers' not in state_attr('media_player.main_speakers', 'group_members') }}"
#     - service: media_player.join
#       target:
#         entity_id: media_player.office_speakers
#       data:
#         group_members: media_player.main_speakers
#     - delay: "00:00:15" # give it time to join/unjoin

# scr_sonos_unjoin4announce:
#   sequence:
#     - condition: template
#       value_template: "{{ 'media_player.office_speakers' in state_attr('media_player.main_speakers', 'group_members') }}"
#     - service: media_player.unjoin
#       target:
#         entity_id: media_player.office_speakers
#     - delay: "00:00:15" # give it time to join/unjoin

# scr_sonos_eval_announce:
#   sequence:
#     - service: script.scr_sonos_join4announce # join as the default
#     - delay: "00:00:15" # give it time to join/unjoin
#     - condition: state
#       entity_id: input_boolean.inp_bool_guest_mode # do not execute remaining unless overnight guests
#       state: "on"
#     - service: script.scr_sonos_unjoin4announce # unjoin if guests
#     - delay: "00:00:15" # give it time to join/unjoin

#
#  MANUAL UI REQUESTS
#

# PAUSE ALARM
scr_pause_leak_alarm:
  sequence:
    - service: input_boolean.turn_on
      target:
        entity_id: input_boolean.inp_bool_pause_leak_alarm

# SPEAK TIME
scr_manual_say_time:
  mode: queued
  sequence:
    - service: script.scr_say_phrase
      data:
        message: "The time is {{ now().time().strftime('%-I:%M %p') }}"

# VACUUM COMMANDS
scr_vacuum_start_custom_cleaning:
  sequence:
    - condition: state
      entity_id: vacuum.rosie # do not execute unless docked (not already cleaning)
      state: "docked"
    - service: neato.custom_cleaning
      target:
        entity_id: vacuum.rosie

scr_vacuum_pause:
  sequence:
    - service: vacuum.pause
      target:
        entity_id: vacuum.rosie

scr_vacuum_stop:
  sequence:
    - service: vacuum.stop
      target:
        entity_id: vacuum.rosie

scr_vacuum_return_to_base:
  sequence:
    - service: vacuum.return_to_base
      target:
        entity_id: vacuum.rosie
