##  Note: leading spaces in each line are critical
##  to yaml interpretation - do not delete them

### SENSORS  ###

#
# Filters are considered a type of sensor
#

- platform: statistics
  name: "24hr Avg Water Pressure"
  entity_id: sensor.water_pressure
  state_characteristic: mean
  sampling_size: 1440 # allow for reporting every minute for 24 hours
  max_age:
    hours: 24
  precision: 2

- platform: statistics
  name: "Living Rm Visible Light"
  entity_id: sensor.raw_living_rm_visible_light # sensor is set to update every minute
  state_characteristic: mean
  sampling_size: 15 # default state value is the running average of this many samples
  precision: 2

- platform: statistics
  name: "10m Avg Master Bedroom Temperature"
  entity_id: sensor.master_bedroom_temperature
  state_characteristic: mean
  sampling_size: 10 # default state value is the running average of this many samples
  precision: 1 # number of decimal places

- platform: filter
  name: "Filtered Solar Tube Luminosity"
  entity_id: sensor.raw_solar_tube_luminosity # sensor is set to update every minute
  filters:
    - filter: outlier
      radius: 500 # default radius is 2 if unspecified
      window_size: 10 # num of prev states to define median (default = 1)
    - filter: lowpass
      time_constant: 10 # Loosely relates to the amount of time it takes for a state to influence the output
      precision: 0

#
# MQTT_ROOM- room of device/beacon location
#            Add one entry for each device tracked
#
- platform: mqtt_room
  device_id: !secret ys_UUID_device_id
  name: "YS cell BLE room"
  #state_topic: !secret ys_UUID_state_topic
  state_topic: "espresense/rooms"
  timeout: 60
  away_timeout: 120

- platform: mqtt_room
  device_id: !secret kt_UUID_device_id
  name: "KT cell BLE room"
  #state_topic: !secret kt_UUID_state_topic
  state_topic: "espresense/rooms"
  timeout: 60
  away_timeout: 120

#
# SNMP sensors
#
- platform: snmp
  name: "NAS temperature"
  host: junior.shencentral.net
  baseoid: 1.3.6.1.4.1.6574.1.2.0
  accept_errors: true
  unit_of_measurement: "ºC"

- platform: snmp
  name: "NAS system fan status"
  host: junior.shencentral.net
  baseoid: 1.3.6.1.4.1.6574.1.4.1.0
  accept_errors: true
  value_template: >
    {% if value | int(default=0) == 1 %}
    OK
    {% else %}
    FAULT
    {% endif %}

- platform: snmp
  name: "NAS CPU fan status"
  host: junior.shencentral.net
  baseoid: 1.3.6.1.4.1.6574.1.4.2.0
  accept_errors: true
  value_template: >
    {% if value | int(default=0) == 1 %}
    OK
    {% else %}
    FAULT
    {% endif %}

#
# Time & Date
#
- platform: time_date
  display_options:
    - "time"
    - "date"
    - "date_time"
    - "time_date"
    - "time_utc"
    #- 'beat'

#
# System monitor
#
- platform: systemmonitor
  resources:
    - type: "disk_free"
      arg: "/"
    - type: "memory_free"
    - type: "processor_use"

- platform: uptime
  name: "Uptime"

#- platform: cert_expiry                               # now configured using GUI
#  host: "shencentral.duckdns.org"

#- platform: filesize                                  # now configured via UI
#  file_paths:
#    - /config/home-assistant_v2.db

#
# OUTDOOR WEATHER & ENVIRONMENTAL SENSORS
#

# Ambient Weather is set up in configuration.yaml

# Darksky - formerly Forecast.io
- platform: darksky
  api_key: !secret darksky_key
  scan_interval: "00:10"
  #  forecast:
  #    - 0
  #    - 1
  #    - 2
  #    - 3
  #    - 4
  #    - 5
  #    - 6
  #  hourly_forecast:
  #    - 7
  #    - 10
  #    - 14
  #    - 17
  #    - 20
  #    - 22
  #    - 31
  #    - 34
  #    - 38
  monitored_conditions:
    - summary
    - icon
    #    - precip_intensity
    - precip_probability
    - temperature
    #    - apparent_temperature
    #    - dew_point
    #    - wind_speed
    #    - wind_bearing
    - cloud_cover
    - humidity
    #    - pressure
    - uv_index
    #    - visibility
    #    - ozone
    - minutely_summary
    - hourly_summary
    - daily_summary

#
# INFLUXDB SENSORS
#

- platform: influxdb
  host: a0d7b954-influxdb
  port: 8086
  username: !secret influxdb_user
  password: !secret influxdb_pwd
  scan_interval: 3600
  queries:
    - name: InfluxDB DB size
      unit_of_measurement: MB
      value_template: "{{ (value|float / 1024 /1024)|round(1,0) }}"
      group_function: sum
      measurement: '"monitor"."shard"'
      database: _internal
      where: "time > now() - 10s"
      field: diskBytes

#
# TEMPLATE SENSORS
#

- platform: template
  sensors:
    ys_cell_gps_accuracy:
      friendly_name: "YS Cell GPS Accuracy"
      unit_of_measurement: "m"
      value_template: "{{ state_attr('device_tracker.ys_cell_gps', 'gps_accuracy') }}"

- platform: template
  sensors:
    kt_cell_gps_accuracy:
      friendly_name: "KT Cell GPS Accuracy"
      unit_of_measurement: "m"
      value_template: "{{ state_attr('device_tracker.kt_cell_gps', 'gps_accuracy') }}"

- platform: template
  sensors:
    last_static_pressure_test:
      friendly_name: "Last Static Pressure Test"
      value_template: >-
        {{ as_timestamp( state_attr('sensor.unvalidated_water_static_pressure_test_result', 'test_end'), '' ) 
        | timestamp_custom ('%m/%d %H:%M', True, 'unknown') }}

- platform: template
  sensors:
    validated_water_static_pressure_test_result:
      friendly_name: "Validated Water Static Pressure Test Result"
      unit_of_measurement: "psi"
      value_template: >-
        {% if (is_state('sensor.spt_data_status', 'valid')) %}
          {{ states('sensor.unvalidated_water_static_pressure_test_result') }}
        {% endif %}

- platform: template
  sensors:
    water_static_pressure_loss_per_minute:
      friendly_name: "Pressure Loss per Minute"
      unit_of_measurement: "psi"
      value_template: >
        {{ (states('sensor.validated_water_static_pressure_test_result') | float(default=0)) / 
          (states('input_number.inp_num_spt_duration') | float(default=0)) }}

- platform: template
  sensors:
    min_water_pressure:
      friendly_name: "Min Water Pressure"
      unit_of_measurement: "psi"
      value_template: "{{ state_attr('sensor.24hr_avg_water_pressure', 'min_value') }}"

- platform: template
  sensors:
    max_water_pressure:
      friendly_name: "Max Water Pressure"
      unit_of_measurement: "psi"
      value_template: "{{ state_attr('sensor.24hr_avg_water_pressure', 'max_value') }}"

- platform: template
  sensors:
    suggested_brightness:
      friendly_name: "Suggested Brightness"
      unit_of_measurement: "%"
      value_template: >-
        {% if ( ( (states('sensor.living_rm_visible_light') | float(default=0)) > (states('input_number.inp_num_0_threshold') | float(default=0)) ) ) %}
          0
        {% elif ( ( (states('sensor.living_rm_visible_light') | float(default=0)) <= (states('input_number.inp_num_0_threshold') | float(default=0)) ) and
              ( (states('sensor.living_rm_visible_light') | float(default=0)) > (states('input_number.inp_num_med_threshold') | float(default=0)) ) ) %}
          30
        {% elif ( ( (states('sensor.living_rm_visible_light') | float(default=0)) <= (states('input_number.inp_num_low_threshold') | float(default=0)) ) and
              ( (states('sensor.living_rm_visible_light') | float(default=0)) > (states('input_number.inp_num_high_threshold') | float(default=0)) ) ) %}
          50
        {% elif ( (states('sensor.living_rm_visible_light') | float(default=0)) <= (states('input_number.inp_num_high_threshold') | float(default=0)) ) %}
          100
        {% else %}
          99
        {% endif %}

    # CLIMATE #

    ecobee_avg_indoor_temperature: # ecobee current temp is the average
      friendly_name: "Avg Indoor Temperature" # of all ecobee sensors
      value_template: "{{ state_attr('climate.ecobee','current_temperature') }}"
      unit_of_measurement: "°F"

    sensibo_sunroom_temperature:
      friendly_name: "Sunroom Temperature"
      value_template: "{{ state_attr('climate.sunroom_ac','current_temperature') }}"
      unit_of_measurement: "°F"

    #    norcoose_dewpoint:
    #      friendly_name: "Norcoose Dewpoint"
    #      unit_of_measurement: "°F"
    #      value_template: >-
    #        {{((((states('sensor.acurite_5n1_1002_f')) |
    #        round(2,0)-32)*5/9)-(100 - (states('sensor.acurite_5n1_1002_h')) |
    #        round(2,0))/5)*1.8+32}}
    ## DewpointC = TempC -((100 - RH)/5.0)
    ## DewpointF = (((TempF-32)*5.0/9.0) - ((100 - RH)/5.0) * 1.8) + 32.0

    #  BATTERIES #
    #    - not all batteries need sensor attribute templates, so not all are here

    front_door_lock_battery:
      friendly_name: "Front Door Lock Batttery"
      value_template: "{{ state_attr('lock.front_door_lock','battery_level') | int(default=0) }}"
      unit_of_measurement: "%"

    back_door_lock_battery:
      friendly_name: "Back Door Lock Battery"
      value_template: "{{ state_attr('lock.back_door_lock','battery_level') | int(default=0) }}"
      unit_of_measurement: "%"

    living_area_motion_battery:
      friendly_name: "Living Area Motion Battery"
      value_template: "{{ state_attr('binary_sensor.living_area_motion','battery_level') | int(default=0) }}"
      unit_of_measurement: "%"

    sunrm_window_1_opened_battery:
      friendly_name: "Sunroom Window 1 Battery"
      value_template: "{{ state_attr('binary_sensor.sunrm_window_1_opened','battery_level') | int(default=0) }}"
      unit_of_measurement: "%"

    sunrm_window_2_opened_battery:
      friendly_name: "Sunroom Window 2 Battery"
      value_template: "{{ state_attr('binary_sensor.sunrm_window_2_opened','battery_level') | int(default=0) }}"
      unit_of_measurement: "%"

    sunrm_window_3_opened_battery:
      friendly_name: "Sunroom Window 3 Battery"
      value_template: "{{ state_attr('binary_sensor.sunrm_window_3_opened','battery_level') | int(default=0) }}"
      unit_of_measurement: "%"

    sunrm_window_4_opened_battery:
      friendly_name: "Sunroom Window 4 Battery"
      value_template: "{{ state_attr('binary_sensor.sunrm_window_4_opened','battery_level') | int(default=0) }}"
      unit_of_measurement: "%"

    front_door_opened_battery:
      friendly_name: "Front Door Battery"
      value_template: "{{ state_attr('binary_sensor.front_door_opened','battery_level') | int(default=0) }}"
      unit_of_measurement: "%"

    back_door_opened_battery:
      friendly_name: "Back Door Battery"
      value_template: "{{ state_attr('binary_sensor.back_door_opened','battery_level') | int(default=0) }}"
      unit_of_measurement: "%"

    garagehouse_door_opened_battery:
      friendly_name: "Garage-House Battery"
      value_template: "{{ state_attr('binary_sensor.garagehouse_door_opened','battery_level') | int(default=0) }}"
      unit_of_measurement: "%"

    sun_room_remote_1_battery:
      friendly_name: "Sunroom Remote 1 Battery"
      value_template: "{{ state_attr('sensor.sun_room_remote_1','battery_level') | int(default=0) }}"
      unit_of_measurement: "%"

    sun_room_remote_2_battery:
      friendly_name: "Sunroom Remote 2 Battery"
      value_template: "{{ state_attr('sensor.sun_room_remote_2','battery_level') | int(default=0) }}"
      unit_of_measurement: "%"

    sun_room_remote_3_battery:
      friendly_name: "Sunroom Remote 3 Battery"
      value_template: "{{ state_attr('sensor.sun_room_remote_3','battery_level') | int(default=0) }}"
      unit_of_measurement: "%"

    sun_room_remote_4_battery:
      friendly_name: "Sunroom Remote 4 Battery"
      value_template: "{{ state_attr('sensor.sun_room_remote_4','battery_level') | int(default=0) }}"
      unit_of_measurement: "%"
