#######################
###    TEMPLATES    ###
#######################

#
# MISCALE WEIGHT/PERSON MAPPING
#

- sensor:
    - name: "yang_template_weight"
      device_class: "weight"
      unit_of_measurement: "lbs"
      icon: mdi:weight-lb
      state: >-
        {% set yang_previous_weight = states('sensor.yang_template_weight') | float(default=0) %}
        {% set weight = states('sensor.ble_weight_d03e7d3e3afa') | float(default=0) %}
          {% if (180 <= weight <= 200) %}
            {{ weight }}      
          {% else %}
            {{ yang_previous_weight }}
          {% endif %}

    - name: "karen_template_weight"
      device_class: "weight"
      unit_of_measurement: "lbs"
      icon: mdi:weight-lb
      state: >-
        {% set karen_previous_weight = states('sensor.karen_template_weight') | float(default=0) %}
        {% set weight = states('sensor.ble_weight_d03e7d3e3afa') | float(default=0) %}
          {% if (130 <= weight <= 150) %}  
            {{ weight }}
          {% else %}
            {{ karen_previous_weight }}
          {% endif %}

    - name: "yang_template_impedance"
      unit_of_measurement: "ohm"
      state: >-
        {% set yang_previous_impedance = states('sensor.yang_template_impedance') | float(default=0) %}
        {% set weight = states('sensor.ble_weight_d03e7d3e3afa') | float(default=0) %}
          {% if (180 <= weight <= 200) %}  
            {{ states("sensor.ble_impedance_d03e7d3e3afa") | float(default=0) }}      
          {% else %}
            {{ yang_previous_impedance }}
          {% endif %}

    - name: "karen_template_impedance"
      unit_of_measurement: "ohm"
      state: >-
        {% set karen_previous_impedance = states('sensor.karen_template_impedance') | float(default=0) %}
        {% set weight = states('sensor.ble_weight_d03e7d3e3afa') | float(default=0) %}
          {% if (130 <= weight <= 150) %}
            {{ states("sensor.ble_impedance_d03e7d3e3afa") | float(default=0) }}
          {% else %}
            {{ karen_previous_impedance }}
          {% endif %}

#
# SENSORS FOR Weber iGrill
#
- sensor:
    - name: "grill_alert_temp"
      state: >-
        {% if (states.sensor.igrill_70918f19e8d1_probe_4.state | int(default=0)) < (states.input_number.igrill_alert_low.state | int(default=0)) 
              or (states.sensor.igrill_70918f19e8d1_probe_4.state | int(default=0))  > (states.input_number.igrill_alert_high.state | int(default=0)) %}
          Alert
        {% else %}
          Normal
        {% endif %}

- sensor:
    - name: "target_alert_temp_probe_1"
      state: >-
        {% if (states.sensor.igrill_70918f19e8d1_probe_1.state | int(default=0)) >= (states.input_number.igrill_probe_1_target.state | int(default=0)) %}
          Alert
        {% else %}
          Normal
        {% endif %}

- sensor:
    - name: "target_alert_temp_probe_2"
      state: >-
        {% if (states.sensor.igrill_70918f19e8d1_probe_2.state | int(default=0)) >= (states.input_number.igrill_probe_2_target.state | int(default=0)) %}
          Alert
        {% else %}
          Normal
        {% endif %}

- sensor:
    - name: "target_alert_temp_probe_3"
      state: >-
        {% if (states.sensor.igrill_70918f19e8d1_probe_3.state | int(default=0)) >= (states.input_number.igrill_probe_3_target.state | int(default=0)) %}
          Alert
        {% else %}
          Normal
        {% endif %}

- sensor:
    - name: "target_alert_temp_probe_4"
      state: >-
        {% if (states.sensor.igrill_70918f19e8d1_probe_4.state | int(default=0)) >= (states.input_number.igrill_probe_4_target.state | int(default=0)) %}
          Alert
        {% else %}
          Normal
        {% endif %}

#
# CURRENT SENSING SENSORS
#

- binary_sensor:
    - name: "dishwasher_on_or_off" # since this is a binary sensor, we only have to determine true/false
      #      friendly_name: "Dishwasher ON/OFF sensor"
      unique_id: dishwasher_on_off_sensor
      delay_on:
        seconds: 30 # amount of time template state must be met before switching to ON
      delay_off:
        seconds: 60 # amount of time template state is NOT met before switching to OFF
      state: >-
        {{ states('sensor.dishwasher_sonoff_energy_current') | float(default=0) > 0.1 }}

#
# LUMINOSITY TRIGGERS - Consolidated as binary template sensors here so trigger values are in one place for automations & scripts #
#   These are binary sensors that are set ON/OFF in automations.yaml based on the input_number settings on the UI settings view.  #
#   Other automations then trigger based on these binary sensors.  A roundabout way to centralize.                                #
#
#   Some triggers have a ON value and an offset OFF value which prevents them as being implemented directly as a binary sensor,   #
#   hence the need to use an input_boolean                                                                                        #
#
- binary_sensor:
    - name: lum_outdoor_lights_solar_trig
      #      friendly_name: "Outdoor lights on/off per solar sensor"
      state: >-
        {{ is_state('input_boolean.inp_bool_lum_outdoor_lights_solar_trig','on') }}

- binary_sensor:
    - name: lum_lvrm_lights_indoor_trig
      #     friendly_name: "LvRm lights on/off per indoor sensor"
      state: >-
        {{ is_state('input_boolean.inp_bool_lum_lvrm_lights_indoor_trig','on') }}

- binary_sensor:
    - name: lum_mood_lights_f_solar_trig
      #      friendly_name: "Mood lights on/off per f_solar sensor"
      state: >-
        {{ is_state('input_boolean.inp_bool_lum_mood_lights_f_solar_trig','on') }}

- binary_sensor:
    - name: lum_sunrm_shades_trig
      #      friendly_name: "Sunroom shades open per solar sensor"
      state: >-
        {{ is_state('input_boolean.inp_bool_lum_sunrm_shades_trig','on') }}

#
# ESPHOME - sensors used in espHome
#

- sensor:
    - name: weather_hourly_next_8
      unique_id: weather_hourly_next_8
      state: >-
        {%- for i in state_attr('weather.forecast_home_hourly', 'forecast') -%}
          {%- if(loop.index <= 8) -%}
            {{(as_timestamp(i.datetime) | timestamp_custom('%-I%p')) | lower}},{{ i.condition }},{{ i.precipitation }}#
          {%- endif -%}
        {%- endfor -%}

#
# MISC SENSORS
#

- sensor:
    - name: ys_cell_gps_accuracy
      #      friendly_name: "YS Cell GPS Accuracy"
      unit_of_measurement: "m"
      state: "{{ state_attr('device_tracker.ys_cell_gps', 'gps_accuracy') }}"

- sensor:
    - name: kt_cell_gps_accuracy
      #      friendly_name: "KT Cell GPS Accuracy"
      unit_of_measurement: "m"
      state: "{{ state_attr('device_tracker.kt_cell_gps', 'gps_accuracy') }}"

- sensor:
    - name: last_static_pressure_test
      #      friendly_name: "Last Static Pressure Test"
      state: >-
        {{ as_timestamp( state_attr('sensor.unvalidated_water_static_pressure_test_result', 'test_end'), '' ) 
        | timestamp_custom ('%m/%d %H:%M', True, 'unknown') }}

- sensor:
    - name: validated_water_static_pressure_test_result
      #      friendly_name: "Validated Water Static Pressure Test Result"
      unit_of_measurement: "psi"
      state: >-
        {% if (is_state('sensor.spt_data_status', 'valid')) %}
          {{ states('sensor.unvalidated_water_static_pressure_test_result') | float(default=0) }}
        {% else %}
          0
        {% endif %}

- sensor:
    - name: water_static_pressure_loss_per_minute
      #      friendly_name: "Pressure Loss per Minute"
      unit_of_measurement: "psi"
      state: >
        {{ (states('sensor.validated_water_static_pressure_test_result') | float(default=0)) / 
          (states('input_number.inp_num_spt_duration') | float(default=0)) }}

- sensor:
    - name: lv_rm_suggested_brightness
      #      friendly_name: "Suggested Brightness"
      unit_of_measurement: "%"
      state: >-
        {% if ( ( (states('sensor.filtered_living_rm_visible_light') | float(default=0)) > (states('input_number.inp_num_0_threshold') | float(default=0)) ) ) %}
          0
        {% elif ( ( (states('sensor.filtered_living_rm_visible_light') | float(default=0)) <= (states('input_number.inp_num_0_threshold') | float(default=0)) ) and
              ( (states('sensor.filtered_living_rm_visible_light') | float(default=0)) > (states('input_number.inp_num_med_threshold') | float(default=0)) ) ) %}
          15
        {% elif ( ( (states('sensor.filtered_living_rm_visible_light') | float(default=0)) <= (states('input_number.inp_num_low_threshold') | float(default=0)) ) and
              ( (states('sensor.filtered_living_rm_visible_light') | float(default=0)) > (states('input_number.inp_num_high_threshold') | float(default=0)) ) ) %}
          20
        {% elif ( (states('sensor.filtered_living_rm_visible_light') | float(default=0)) <= (states('input_number.inp_num_high_threshold') | float(default=0)) ) %}
          30
        {% else %}
          99
        {% endif %}

    # CLIMATE #

- sensor:
    - name: ecobee_avg_indoor_temperature # ecobee current temp is the average
      #      friendly_name: "Avg Indoor Temperature" # of all ecobee sensors
      state: "{{ state_attr('climate.ecobee','current_temperature') }}"
      unit_of_measurement: "°F"

- sensor:
    - name: sensibo_sunroom_temperature
      #      friendly_name: "Sunroom Temperature"
      state: "{{ state_attr('climate.sunroom_ac','current_temperature') }}"
      unit_of_measurement: "°F"

    #  BATTERIES #
    #    - not all batteries need sensor attribute templates, so not all are here

- sensor:
    - name: living_area_motion_battery
      #      friendly_name: "Living Area Motion Battery"
      state: "{{ state_attr('binary_sensor.living_area_motion','battery_level') | int(default=0) }}"
      unit_of_measurement: "%"

- sensor:
    - name: sunrm_window_1_opened_battery
      #      friendly_name: "Sunroom Window 1 Battery"
      state: "{{ state_attr('binary_sensor.sunrm_window_1_opened','battery_level') | int(default=0) }}"
      unit_of_measurement: "%"

- sensor:
    - name: sunrm_window_2_opened_battery
      #      friendly_name: "Sunroom Window 2 Battery"
      state: "{{ state_attr('binary_sensor.sunrm_window_2_opened','battery_level') | int(default=0) }}"
      unit_of_measurement: "%"

- sensor:
    - name: sunrm_window_3_opened_battery
      #      friendly_name: "Sunroom Window 3 Battery"
      state: "{{ state_attr('binary_sensor.sunrm_window_3_opened','battery_level') | int(default=0) }}"
      unit_of_measurement: "%"

- sensor:
    - name: sunrm_window_4_opened_battery
      #      friendly_name: "Sunroom Window 4 Battery"
      state: "{{ state_attr('binary_sensor.sunrm_window_4_opened','battery_level') | int(default=0) }}"
      unit_of_measurement: "%"

- sensor:
    - name: front_door_opened_battery
      #      friendly_name: "Front Door Battery"
      state: "{{ state_attr('binary_sensor.front_door_opened','battery_level') | int(default=0) }}"
      unit_of_measurement: "%"

- sensor:
    - name: back_door_opened_battery
      #      friendly_name: "Back Door Battery"
      state: "{{ state_attr('binary_sensor.back_door_opened','battery_level') | int(default=0) }}"
      unit_of_measurement: "%"

- sensor:
    - name: garagehouse_door_opened_battery
      #      friendly_name: "Garage-House Battery"
      state: "{{ state_attr('binary_sensor.garagehouse_door_opened','battery_level') | int(default=0) }}"
      unit_of_measurement: "%"

- sensor:
    - name: sun_room_remote_1_battery
      #      friendly_name: "Sunroom Remote 1 Battery"
      state: "{{ state_attr('sensor.sun_room_remote_1','battery_level') | int(default=0) }}"
      unit_of_measurement: "%"

- sensor:
    - name: sun_room_remote_2_battery
      #      friendly_name: "Sunroom Remote 2 Battery"
      state: "{{ state_attr('sensor.sun_room_remote_2','battery_level') | int(default=0) }}"
      unit_of_measurement: "%"

- sensor:
    - name: sun_room_remote_3_battery
      #      friendly_name: "Sunroom Remote 3 Battery"
      state: "{{ state_attr('sensor.sun_room_remote_3','battery_level') | int(default=0) }}"
      unit_of_measurement: "%"

- sensor:
    - name: sun_room_remote_4_battery
      #      friendly_name: "Sunroom Remote 4 Battery"
      state: "{{ state_attr('sensor.sun_room_remote_4','battery_level') | int(default=0) }}"
      unit_of_measurement: "%"
